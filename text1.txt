GET /users         – HTML Document Render - Done
GET /api/users     – List all users JSON – Done

GET /api/users/1   – Get the user with ID 1 -- Done
GET /api/users/2   – Get the user with ID 2 ---Done

Dynamic Path Parameters  
GET /api/users/:id

POST /api/users    – Create new user

PATCH /api/users/1 – Edit the user with ID 1


-------------------> Succesful Desigining of Rest API ----------------------->

//  REST API Design - 5 Key Principles (with Examples)

1. Clear and Consistent Resource Naming
- Use nouns to represent resources.
- Example:
  Good:   GET /api/users
  Bad:    GET /api/getUsers

2. Proper Use of HTTP Methods
- Follow standard HTTP verbs for actions.
- Example:
  GET /api/users        → Get all users
  POST /api/users       → Create a user
  GET /api/users/:id    → Get a user by ID
  PATCH /api/users/:id  → Update user info
  DELETE /api/users/:id → Delete a user

3. Meaningful and Consistent Responses
- Return structured JSON responses with status codes.
- Example:
  Success Response:
  {
    "success": true,
    "data": { "id": 1, "name": "Alice" }
  }

  Error Response:
  {
    "success": false,
    "message": "User not found"
  }

4. Error Handling and Validation
- Validate input and handle errors with proper messages and status codes.
- Example:
  If ID is not found:
  Status: 404 Not Found
  Response: { "error": "User not found" }

  If input is invalid:
  Status: 400 Bad Request
  Response: { "error": "Invalid user data" }

5. Security and Authentication
- Secure sensitive routes using tokens or authentication.
- Example:
  - Public:    GET /api/products
  - Protected: GET /api/orders (requires token)
  - Use JWT token in headers: Authorization: Bearer <token>
